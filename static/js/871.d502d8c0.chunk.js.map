{"version":3,"file":"static/js/871.d502d8c0.chunk.js","mappings":"yNAiCA,UA5BgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,qGACCC,EAAAA,EAAAA,IAAgBP,GADjB,OACZQ,EADY,OAElBJ,EAAWI,GAFO,2CAAH,qDAIjBF,GACD,GAAE,CAACN,KAGF,wBACGG,EAAQM,OAAS,EACdN,EAAQO,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzB,OACE,2BACE,qCAAaD,MACb,uBAAIC,MAFGF,EAKZ,IACD,WAGT,C,sLC5BKG,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAMAC,EAAW,mCAAG,6FACzBC,QAAQC,MADiB,SAEHP,EAASQ,IAAT,oBALL,QAKK,YAJJ,SAEO,uBAEjBd,EAFiB,EAEjBA,KAFiB,kBAGlBA,EAAKe,SAHa,2CAAH,qDAQXC,EAAe,mCAAG,WAAMC,GAAN,kGAEJX,EAASQ,IAAI,gBAAiB,CACnDL,OAAQ,CACNQ,MAAAA,KAJuB,uBAEnBjB,EAFmB,EAEnBA,KAKRY,QAAQC,IAAIb,EAAKe,SAPU,kBAQpBf,EAAKe,SARe,gCAW3BG,MAAM,EAAD,IAXsB,yDAAH,sDAgBfC,EAAe,mCAAI,WAAO3B,GAAP,yFACLc,EAASQ,IAAT,iBAAuBtB,IADlB,uBACpBQ,EADoB,EACpBA,KACNY,QAAQC,IAAIb,GAFc,kBAGrBA,GAHqB,2CAAJ,sDAOfoB,EAAe,mCAAI,WAAO5B,GAAP,yFACLc,EAASQ,IAAT,iBAAuBtB,EAAvB,aADK,uBACpBQ,EADoB,EACpBA,KADoB,kBAElBA,EAAKqB,MAFa,2CAAJ,sDAKftB,EAAe,mCAAI,WAAOP,GAAP,yFACLc,EAASQ,IAAT,iBAAuBtB,EAAvB,aADK,uBACpBQ,EADoB,EACpBA,KACNY,QAAQC,IAAIb,EAAKe,SAFS,kBAGrBf,EAAKe,SAHgB,2CAAJ,sDAMfO,EAAY,SAAAL,GACvB,MAAc,KAAVA,GAA0B,OAAVA,EACXN,IAEAK,EAAgBC,EAE1B,C","sources":["pages/Reviews/Reviews.jsx","servisAPI/servisAPI.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMovieReviews } from '../../servisAPI/servisAPI';\nimport PropTypes from 'prop-types';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const data = await getMovieReviews(movieId);\n      setReviews(data);\n    };\n    fetchMovies();\n  }, [movieId]);\n\n  return (\n    <ul>\n      {reviews.length > 0\n        ? reviews.map(({ id, author, content }) => {\n            return (\n              <li key={id}>\n                <h3>Author: {author}</h3>\n                <p>{content}</p>\n              </li>\n            );\n          })\n        : 'nothing'}\n    </ul>\n  );\n};\n\nexport default Reviews;\n\nReviews.propTypes = {\n  reviews: PropTypes.array,\n};","import axios from 'axios';\n\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '0be6852ca8cd54f03df513633364c09a',\n  },\n});\nconst media_type = 'movie';\nconst time_window = 'week';\n\nexport const getTrending = async () => {\n  console.log();\n  const { data} = await instance.get(`/trending/${media_type}/${time_window}`);\n  return data.results;\n};\n\n\n\nexport const getSearchMovies = async query => {\n  try {\n    const { data } = await instance.get('/search/movie', {\n      params: {\n        query,\n      },\n    });\n    console.log(data.results)\n    return data.results;\n    \n  } catch (error) {\n    alert(error);\n  }\n};\n\n\nexport const getMovieDetails  = async (movieId) => {\n    const { data } = await instance.get(`/movie/${movieId}`);\n      console.log(data);\n    return data;\n};\n\n\nexport const getMovieCredits  = async (movieId) => {\n    const { data } = await instance.get(`/movie/${movieId}/credits`);\n       return data.cast;\n};\n\nexport const getMovieReviews  = async (movieId) => {\n    const { data } = await instance.get(`/movie/${movieId}/reviews`);\n      console.log(data.results);\n    return data.results;\n};\n\nexport const getMovies = query => {\n  if (query === '' || query === null)  {\n    return getTrending();\n  } else {\n    return getSearchMovies(query);\n  }\n};\n\n"],"names":["movieId","useParams","useState","reviews","setReviews","useEffect","fetchMovies","getMovieReviews","data","length","map","id","author","content","instance","axios","baseURL","params","api_key","getTrending","console","log","get","results","getSearchMovies","query","alert","getMovieDetails","getMovieCredits","cast","getMovies"],"sourceRoot":""}